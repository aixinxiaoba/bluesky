<?xml version="1.0" encoding="UTF-8"?>


<!-- 加入spring注解缓存 
xmlns:cache="http://www.springframework.org/schema/cache"

http://www.springframework.org/schema/cache
http://www.springframework.org/schema/cache/spring-cache.xsd	

		   
-->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	 xmlns:cache="http://www.springframework.org/schema/cache"
	  xmlns:p="http://www.springframework.org/schema/p"
	  xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	  
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
                   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                   http://www.springframework.org/schema/context
                   http://www.springframework.org/schema/context/spring-context-2.5.xsd
				   http://www.springframework.org/schema/aop
				   http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
				   http://www.springframework.org/schema/tx 
				   http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
				   
				   http://www.springframework.org/schema/cache
				   http://www.springframework.org/schema/cache/spring-cache.xsd
				   http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring   
				    http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd
				   "
				   
        	
				   
				   
				   default-autowire="byName" default-lazy-init="false">
	
	<!-- 
		属性文件读入,使用rapid中的JdbcPlaceholderConfigurer则可以从数据库读取配置信息 
		<context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>:也可以
	-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<!--  
					<value>/WEB-INF/upload/config/jdbc.properties</value>
				-->
				<value>classpath*:jdbc.properties</value>
				
			</list>
		</property>
	</bean>
				   
	<!-- 国际化,并且可以批定文件编码,可以使用classpath: 或者WEB-INF/ 前缀 -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
    	<property name="basenames">
    		<list>
    			<value>classpath:i18n/messages</value>
    		</list>
    	</property>
    	<property name="defaultEncoding" value="UTF-8"/>
    	<property name="cacheSeconds" value="60"/>
    </bean>
	
	<!-- DataSource -->
	<!-- 
		<property name="initialSize"><value>3</value></property>  
		<property name="maxActive"><value>100</value></property>  
        <property name="maxWait"><value>10000</value></property>  
        <property name="maxIdle"><value>50</value></property>  
        <property name="removeAbandoned"><value>true</value></property>  
        <property name="removeAbandonedTimeout"><value>60</value></property>
        <property name="logAbandoned" value="true"></property>
        <property name="poolPreparedStatements" value="true"></property>
        --> 
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
        <property name="initialPoolSize" value="5"></property>
		<property name="minPoolSize" value="5"></property>
		<property name="maxPoolSize" value="20"></property>
		<property name="acquireIncrement" value="5"></property>
		<property name="maxStatements" value="8"></property>
		<property name="maxStatementsPerConnection" value="5"></property>
		<property name="maxIdleTime" value="1800"></property>
	</bean>
 
 	<!-- 
    <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName"><value>java:comp/env/jdbc/ds</value></property>
    </bean>
 	-->
 	
 	<!-- 用于测试或demo的hsql的内存dataSource,可以在创建数据库时运行指定的初始化sql语句,如建表,插入测试数据,sql语句之间使用分号";"分隔 -->
 	<!-- 
 	<bean id="dataSource" class="cn.org.rapid_framework.test.hsql.HSQLMemDataSourceFactoryBean">
		<property name="encoding" value="UTF-8"/>
		<property name="scriptLocations">
			<value>classpath*:hsql_test_scripts.sql</value>
		</property>
		<property name="sqlScript">
			<value>
				create table blog(id int);
				insert into blog values (1);
			</value>
		</property>		
	</bean>
 	 -->
	
	<!-- log4jdbc可以将数据源执行的sql将占位符?替换成字符,并以日志打印出来. log4j配置: log4j.logger.jdbc.sqltiming=INFO -->
	<!-- 暂不启用
	<bean id="log4jdbcInterceptor" class="net.sf.log4jdbc.DataSourceSpyInterceptor" />
    <bean id="dataSourceLog4jdbcAutoProxyCreator" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
       <property name="interceptorNames">
           <list>
              <value>log4jdbcInterceptor</value>        
           </list>
       </property>
       <property name="beanNames">
           <list>
              <value>dataSource</value>
           </list>
       </property>
    </bean>
 	-->
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
	
	<!--HB Annotation SF-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!-- 可以自动搜索某个package的全部标记@Entity class -->
		<property name="packagesToScan">
			<list>
				<value >com.manage.crm.entity</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<!--常用数据库方言 MySQL5Dialect,SQLServerDialect,OracleDialect,SybaseDialect,DB2Dialect,HSQLDialect -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.query.substitutions">true 1, false 0</prop>
				<prop key="hibernate.default_batch_fetch_size">10</prop>
				
				<!-- 
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				 -->
			</props>
		</property>
	</bean>
	
	<!--HB TransactionManager-->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<!-- 以 @Transactional 标注来定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- 支持 @AspectJ 标记
	<aop:aspectj-autoproxy/>
	-->
	
	<!-- 用于持有ApplicationContext,可以使用ApplicationContextHolder.getBean('xxxx')的静态方法得到spring bean对象 -->
	<!-- 
	<bean class="cn.org.rapid_framework.util.holder.ApplicationContextHolder"/>
 	-->
	
	<!--  激活 @Autowired , @Required , @PostConstruct, @PreDestroy and @Resource 等标注 -->
	
	<!-- 
	方法一
	 <context:annotation-config />
	
	<ehcache:annotation-driven cache-manager="ehCacheManager" />
	<bean id="ehCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">  
        <property name="configLocation" value="classpath:ehcache.xml" />  
    </bean> 
	 -->
	 
	 
	 <!-- 
	 <cache:annotation-driven />
	  <bean id="cacheManager"  class="org.springframework.cache.support.SimpleCacheManager">
	     <property name="caches"> 
	       <set> 
	         <bean
	           class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
	           p:name="default" /> 
	         <bean
	           class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
	           p:name="accountCache" /> 
	       </set> 
	     </property> 
    </bean>
	  -->
	 
<!--	<cache:annotation-driven cache-manager="cacheManager" />-->
<!---->
<!--	<bean id="cacheManagerFactory"-->
<!--		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
<!--		<property name="configLocation" value="classpath:ehcache.xml" />-->
<!--	</bean>-->
<!--	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">-->
<!--		<property name="cacheManager" ref="cacheManagerFactory" />-->
<!--	</bean>-->
	
</beans>
